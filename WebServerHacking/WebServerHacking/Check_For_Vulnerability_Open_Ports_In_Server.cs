using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Threading;
using System.Net.Sockets;

namespace WebServerHacking
{
    public partial class Check_For_Vulnerability_Open_Ports_In_Server : Form
    {
        public Check_For_Vulnerability_Open_Ports_In_Server()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string host = textBox1.Text;
            int StartPort = Convert.ToInt32(textBox2.Text);
            int EndPort = Convert.ToInt32(textBox3.Text);
            int timeOut = Convert.ToInt32(textBox4.Text);

            RunTCPScanning(StartPort, EndPort, timeOut, host);

        }
        public void RunTCPScanning(int StartPort, int EndPort, int timeOut, string host)
        {
            while (StartPort < EndPort)
            {
                try
                {
                    richTextBox3.Text = richTextBox3.Text + BannerGrab(host, StartPort, timeOut);

                }
                catch (Exception ex)
                {

                }
                Thread.Sleep(2);
                richTextBox1.Text = richTextBox1.Text + "Connecting The Server:" + textBox1.Text + "with the port number" + StartPort.ToString();

                try
                {
                    StartPort++;
                    Connect(host, StartPort, timeOut);
                }
                catch (Exception ex)
                {
                    continue;
                }


            }

        }

        public int tcpTimeout;
        private class isTCPPortOpen
        {
            public TcpClient Client { get; set; }
            public bool tcpOpen { get; set; }
        }
        public TcpClient Connect(string host, int StartPort, int timeOut)
        {
            var newclient = new TcpClient();
            var state = new isTCPPortOpen
            {
                Client = newclient,
                tcpOpen = true
            };
            IAsyncResult ar = newclient.BeginConnect(host, StartPort, AsyncCallback, state);
            state.tcpOpen = ar.AsyncWaitHandle.WaitOne(timeOut, false);

            if (state.tcpOpen == true)
            {
                richTextBox2.Text = richTextBox2.Text + "\n TCP Port is Open and the Port Number Is" + StartPort.ToString();
                Application.DoEvents();

            }
            if (state.tcpOpen == false)
            {
                richTextBox1.Text = richTextBox1.Text + "\n TCP Port" + StartPort.ToString() + "is not avaolable for access";

                Application.DoEvents();
                throw new Exception();
            }

            return newclient;
        }
        void AsyncCallback(IAsyncResult asyncResult)
        {
            var state = (isTCPPortOpen)asyncResult.AsyncState;
            TcpClient client = state.Client;
            try
            {
                client.EndConnect(asyncResult);
            }
            catch (Exception ex)
            {
                return;
            }
            client.Close();
        }


        Hacking_Library.hacking hacking = new Hacking_Library.hacking();
        public string BannerGrab(string host, int StartPort, int timeOut)
        {
            try
            {
                var newClient = new TcpClient(host, StartPort);
                newClient.SendTimeout = timeOut;
                newClient.ReceiveTimeout = timeOut;

                NetworkStream ns = newClient.GetStream();
                byte[] mybytes = new byte[2048];
                int bytesRead = ns.Read(mybytes, hacking.bytes(), mybytes.Length);

                string response = Encoding.ASCII.GetString(mybytes, hacking.bytes(), bytesRead);

                return response;
            }
            catch (Exception ex)
            {
                return "";
            }
        }


        private void label10_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}  

